AWSTemplateFormatVersion: '2010-09-09'
Description: Create AWS Academy cloud operations activity 5 resources

Parameters:
  EC2StackURL:
    Type: String
    Description: S3 URL of EC2 cloudformation template
  VPCStackName:
    Type: String
    Description: Stack name of VPC cloudformation template
  S3StackName:
    Type: String
    Description: Stack name of S3 cloudformation template
  ServerFilesObjectVersion:
    Type: String
    Description: Version id of server tar file S3 object
  SqlCreateFileObjectVersion:
    Type: String
    Description: Version id of sql create table file S3 object
  SqlInsertFileObjectVersion:
    Type: String
    Description: Version id of sql insert values file S3 object
  SalesDataLambdaObjectVersion:
    Type: String
    Description: Version id of salesAnalysisReportDataExtractor zip file S3 object
  SalesReportLambdaObjectVersion:
    Type: String
    Description: Version id of salesAnalysisReport zip file S3 object
  LambdaLayerObjectVersion:
    Type: String
    Description: Version id of dependent Lambda layer zip file S3 object
  SNSEmail:
    Type: String
    Description: Email that SNS topic notifies to
  ReportSchedule:
    Type: String
    Default: "rate(2 minutes)"
    Description: Cron in UTC or rate expression to trigger salesAnalysisReport Lambda function to run
  LatestAmiId:
    Type: String
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: SSM Parameter of EC2 AMI
  DBPassword:
    Type: String 
    Default: password
    NoEcho: 'true'
    Description: Password for MySQL user
  DBUser:
    Type: String
    Default: username
    NoEcho: 'true'
    Description: Username for MySQL user


Resources:
  EC2Stack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref EC2StackURL
      Parameters:
        VPCStackName: !Ref VPCStackName
        S3StackName: !Ref S3StackName
        ServerVersionId: !Ref ServerFilesObjectVersion
        SqlCreateTableVersionId: !Ref SqlCreateFileObjectVersion
        SqlInsertValuesVersionId: !Ref SqlInsertFileObjectVersion
        LatestAmiId: !Ref LatestAmiId
        DBUser: !Ref DBUser
        DBPassword: !Ref DBPassword

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SalesTopic
      TopicName: SalesAnalysisReportTopic
      Subscription:
        - Endpoint: !Ref SNSEmail
          Protocol: email


  SalesDataRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SalesAnalysisReportDERole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  SalesReportRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SalesAnalysisReportRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole


  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: pymysqlLibrary
      Description: PyMySQL 0.9.3 library modules
      Content:
        S3Bucket: 
          Fn::ImportValue:
            !Sub ${S3StackName}-S3BucketName
        S3Key: salesLambdaLayer.zip
        S3ObjectVersion: !Ref LambdaLayerObjectVersion
      CompatibleRuntimes:
        - python3.7

  SalesDataLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: salesAnalysisReportDataExtractor
      Description: Lambda Function with code to call an external service
      Code: 
        S3Bucket: 
          Fn::ImportValue:
            !Sub ${S3StackName}-S3BucketName
        S3Key: salesAnalysisReportDataExtractor.zip
        S3ObjectVersion: !Ref SalesDataLambdaObjectVersion
      Handler: salesAnalysisReportDataExtractor.lambda_handler
      Runtime: python3.7
      Timeout: 30
      Layers:
        - !Ref LambdaLayer
      Role: !GetAtt SalesDataRole.Arn
      VpcConfig: 
        SecurityGroupIds:
          - !GetAtt EC2Stack.Outputs.SalesSecurityGroupId
        SubnetIds:
          - Fn::ImportValue:
              !Sub ${VPCStackName}-PrivateSubnetId

  SalesReportLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: salesAnalysisReport
      Description: Lambda Function with code to call an external service
      Code: 
        S3Bucket: 
          Fn::ImportValue:
            !Sub ${S3StackName}-S3BucketName
        S3Key: salesAnalysisReport.zip
        S3ObjectVersion: !Ref SalesReportLambdaObjectVersion
      Handler: salesAnalysisReport.lambda_handler
      Runtime: python3.7
      Timeout: 30
      Role: !GetAtt SalesReportRole.Arn
      Environment: 
        Variables:
          topicARN: !Ref SNSTopic


  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: scheduler.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: invoke-sales-report-lambda
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "lambda:InvokeFunction"
                  Resource: !GetAtt SalesReportLambda.Arn
        RoleName: SalesReportTriggerRole

  CloudwatchScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: SalesReportEvent
      FlexibleTimeWindow: 
        Mode: "OFF"
      ScheduleExpression: !Ref ReportSchedule
      Target: 
        Arn: !GetAtt SalesReportLambda.Arn
        RoleArn: !GetAtt SchedulerRole.Arn

